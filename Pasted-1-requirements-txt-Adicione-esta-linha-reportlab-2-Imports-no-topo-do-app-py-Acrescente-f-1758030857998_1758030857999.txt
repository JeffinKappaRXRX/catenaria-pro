1) requirements.txt

Adicione esta linha:

reportlab

2) Imports (no topo do app.py)

Acrescente:

from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image as RLImage
from reportlab.lib.units import mm

3) Helpers do PDF (adicione ap√≥s suas fun√ß√µes de caten√°ria)
# ======= RELAT√ìRIO T√âCNICO (PDF) =======
def _fig_to_png_bytes(fig):
    import io
    buf = io.BytesIO()
    fig.savefig(buf, format="png", dpi=160, bbox_inches="tight")
    buf.seek(0)
    return buf

def build_pdf_report_bytes(contexto: dict, resultados: dict, df_perfil: pd.DataFrame, fig) -> bytes:
    """
    Gera PDF com base no √∫ltimo c√°lculo.
    contexto: infos de entrada (geometria, cabo, m√©todo, folga requerida etc.)
    resultados: dicion√°rio retornado por compute_* (sag, folga, tens√µes, etc.)
    df_perfil: DataFrame com perfil (solo/corda/caten√°ria)
    fig: figura matplotlib exibida no app
    """
    import io
    buf_pdf = io.BytesIO()
    doc = SimpleDocTemplate(buf_pdf, pagesize=A4, topMargin=18*mm, bottomMargin=18*mm, leftMargin=18*mm, rightMargin=18*mm)
    estilo = getSampleStyleSheet()
    estilo_titulo = ParagraphStyle("titulo", parent=estilo["Heading1"], alignment=0, spaceAfter=8, fontSize=16)
    estilo_sub = ParagraphStyle("sub", parent=estilo["Normal"], textColor=colors.grey, spaceAfter=6)
    estilo_hdr = ParagraphStyle("hdr", parent=estilo["Heading3"], spaceBefore=10, spaceAfter=6)
    elems = []

    # Cabe√ßalho
    titulo = "Relat√≥rio T√©cnico ‚Äî Caten√°ria (V√£o, Flecha, Folga e Tra√ß√£o)"
    elems.append(Paragraph(titulo, estilo_titulo))
    meta = f"{contexto.get('obra','')}  ‚Ä¢  {contexto.get('cliente','')}  ‚Ä¢  {datetime.now().strftime('%d/%m/%Y %H:%M')}"
    elems.append(Paragraph(meta, estilo_sub))

    # Tabela de entradas
    entradas = [
        ["Geometria",
         f"L = {contexto['L']:.2f} m  |  H_esq = {contexto['H_esq']:.2f} m  |  H_dir = {contexto['H_dir']:.2f} m  |  Œîh_solo = {contexto['delta_solo']:.2f} m"],
        ["Cabo",
         f"{contexto['cabo_nome']}  |  w = {contexto['w_kgpm']:.3f} kg/m ({contexto['w_Npm']:.2f} N/m)  |  p_v = {contexto['p_vento']:.1f} N/m"],
        ["M√©todo",
         contexto['metodo_descr']],
        ["Norma/Folga",
         f"Folga m√≠nima exigida = {contexto['folga_req']:.2f} m  |  Crit√©rio = {contexto.get('criterio','NBR 15992')}"],
    ]
    t1 = Table(entradas, colWidths=[35*mm, 140*mm])
    t1.setStyle(TableStyle([
        ("BOX", (0,0), (-1,-1), 0.5, colors.black),
        ("INNERGRID", (0,0), (-1,-1), 0.25, colors.grey),
        ("BACKGROUND", (0,0), (0,-1), colors.whitesmoke),
        ("VALIGN", (0,0), (-1,-1), "TOP"),
        ("LEFTPADDING", (0,0), (-1,-1), 6),
        ("RIGHTPADDING", (0,0), (-1,-1), 6),
        ("FONTSIZE", (0,0), (-1,-1), 9),
    ]))
    elems += [Spacer(1, 4*mm), t1]

    # Resultados principais
    elems.append(Spacer(1, 4*mm))
    elems.append(Paragraph("Resultados Principais", estilo_hdr))
    ok_txt = "OK" if resultados["clear_min (m)"] + 1e-6 >= contexto["folga_req"] else "ALERTA"
    res_tab = [
        ["Flecha no meio (vs corda)", f"{resultados['sag_meio (m)']:.2f} m"],
        ["Flecha m√°xima / posi√ß√£o x", f"{resultados['sag_max (m)']:.2f} m  @ x = {resultados['x_sag_max (m)']:.2f} m"],
        ["Folga m√≠nima ao solo / posi√ß√£o x", f"{resultados['clear_min (m)']:.2f} m  @ x = {resultados['x_clear_min (m)']:.2f} m  ‚Üí  {ok_txt}"],
        ["Tens√£o horizontal H", f"{resultados['H_horizontal (N)']/1000:.3f} kN"],
        ["Tra√ß√£o no apoio esquerdo/direito", f"{resultados['T_left (N)']/1000:.3f} / {resultados['T_right (N)']/1000:.3f} kN"],
        ["Par√¢metro a / xc", f"a = {resultados['a (m)']:.3f} m  |  xc = {resultados['xc (m)']:.3f} m"],
    ]
    t2 = Table(res_tab, colWidths=[70*mm, 105*mm])
    t2.setStyle(TableStyle([
        ("BOX", (0,0), (-1,-1), 0.5, colors.black),
        ("INNERGRID", (0,0), (-1,-1), 0.25, colors.grey),
        ("BACKGROUND", (0,0), (0,0), colors.whitesmoke),
        ("BACKGROUND", (0,2), (0,2), colors.whitesmoke),
        ("LEFTPADDING", (0,0), (-1,-1), 6),
        ("RIGHTPADDING", (0,0), (-1,-1), 6),
        ("FONTSIZE", (0,0), (-1,-1), 9),
    ]))
    elems += [Spacer(1, 2*mm), t2]

    # Gr√°fico
    elems.append(Spacer(1, 4*mm))
    elems.append(Paragraph("Gr√°fico do V√£o", estilo_hdr))
    img_buf = _fig_to_png_bytes(fig)
    elems.append(RLImage(img_buf, width=170*mm, preserveAspectRatio=True))

    # Observa√ß√µes e assinatura
    elems += [
        Spacer(1, 4*mm),
        Paragraph("Observa√ß√µes", estilo_hdr),
        Paragraph(contexto.get("obs","‚Äî"), estilo["Normal"]),
        Spacer(1, 6*mm),
        Paragraph(f"Respons√°vel t√©cnico: {contexto.get('engenheiro','')} ‚Äî CREA: {contexto.get('crea','')}", estilo_sub),
    ]

    doc.build(elems)
    buf_pdf.seek(0)
    return buf_pdf.getvalue()

def pdf_expander_ui(res, df, fig, contexto_base: dict):
    """Bloco UI para preencher cabe√ßalho e baixar PDF."""
    with st.expander("üìÑ Relat√≥rio t√©cnico (PDF)"):
        c1, c2 = st.columns(2)
        with c1:
            obra = st.text_input("Obra / Identifica√ß√£o", value=contexto_base.get("obra",""))
            cliente = st.text_input("Cliente / Unidade", value=contexto_base.get("cliente",""))
            engenheiro = st.text_input("Engenheiro respons√°vel", value=contexto_base.get("engenheiro",""))
        with c2:
            crea = st.text_input("CREA", value=contexto_base.get("crea",""))
            obs = st.text_area("Observa√ß√µes", value=contexto_base.get("obs",""), height=90)

        contexto = dict(contexto_base)
        contexto.update({"obra": obra, "cliente": cliente, "engenheiro": engenheiro, "crea": crea, "obs": obs})

        if st.button("Gerar PDF do relat√≥rio", type="secondary"):
            try:
                pdf_bytes = build_pdf_report_bytes(contexto, res, df, fig)
                st.download_button(
                    "‚¨áÔ∏è Baixar relat√≥rio (PDF)",
                    data=pdf_bytes,
                    file_name="relatorio_catenaria.pdf",
                    mime="application/pdf",
                    use_container_width=True
                )
            except Exception as e:
                st.error(f"Falha ao gerar PDF: {e}")

4) Salvar o ‚Äúcontexto‚Äù e chamar o bloco do PDF onde voc√™ mostra os resultados

No trecho da aba Caten√°ria (em cada modo ‚Äî por H, por f e por S), logo depois de voc√™ calcular o res, montar df e plotar o gr√°fico fig, adicione:

# ‚Äî montar contexto-base para o relat√≥rio ‚Äî
contexto_base = {
    "L": L,
    "H_esq": H_esq,
    "H_dir": H_dir,
    "delta_solo": delta_solo,
    "cabo_nome": nome_cabo,            # ou nome_cabo2 no pr√©-projeto
    "w_kgpm": w_vert_Npm/9.80665,      # kg/m
    "w_Npm": w_vert_Npm,               # N/m
    "p_vento": p_vento,                # N/m
    "folga_req": folga_req,            # valor vindo do seletor de norma
    "criterio": "NBR 15992",
    # descreve rapidamente o m√©todo usado:
    "metodo_descr": metodo_descritivo, # ver abaixo
    # campos de cabe√ßalho (opcionais; ser√£o edit√°veis no expander)
    "obra": "", "cliente": "", "engenheiro": "", "crea": "", "obs": ""
}

# ‚Äî descri√ß√£o do m√©todo (ajuste conforme o modo) ‚Äî
# No modo H:
metodo_descritivo = f"Por Tens√£o Horizontal H = {res['H_horizontal (N)']/1000:.3f} kN"
# No modo f:
# metodo_descritivo = f"Por Flecha no meio (alvo) = {f_mid:.2f} m"
# No modo S:
# metodo_descritivo = f"Por Comprimento do cabo S = {S:.2f} m"

# ‚Äî bloco de relat√≥rio PDF ‚Äî
pdf_expander_ui(res, df, fig, contexto_base)


Onde declarar nome_cabo e w_vert_Npm?
Use as vari√°veis que voc√™ j√° tem na aba (no meu c√≥digo anterior elas v√™m do dropdown de cabos e do c√°lculo do peso).
folga_req √© o valor retornado pelo teu seletor de norma (T12/T13).